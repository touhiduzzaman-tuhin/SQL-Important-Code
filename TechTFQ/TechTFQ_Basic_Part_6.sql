-- CORELEATED SUB QUERY
-- THIS TYPE OF SUB QUERY IS RELEATED TO THE OUTER QUERY

-- FIND THE EMPLOYEES OF EACH DEPARTMENT WHO EARN MORE THAN THE AVERAGE SALARY IN EACH DEPARTMENT

SELECT * FROM DEPT;
SELECT * FROM STUDENT;
SELECT * FROM STUDENT WHERE STD_DEPT, SALARY IN

SELECT STD_DEPT, AVG(SALARY)::NUMERIC(10, 2) AS SALARY FROM STUDENT GROUP BY STD_DEPT;

-- FIND THE STUDENTS WHO'S SALARY IS MORE THE AVERAGE SALARY

SELECT * 
FROM STUDENT
WHERE SALARY > (SELECT AVG(SALARY) FROM STUDENT);

SELECT *
FROM STUDENT AS STD
WHERE SALARY > (SELECT AVG(SALARY) FROM STUDENT AS S WHERE STD.STD_DEPT = S.STD_DEPT);


-- FIND THE DEPARTMENT WHO DON'T HAVE ANY DEPARTMENT
SELECT * FROM STUDENT;
SELECT * FROM DEPT;

SELECT *
FROM DEPT AS D
WHERE NOT EXISTS (SELECT 1 FROM STUDENT AS S WHERE S.STD_DEPT = D.STD_DEPT);


CREATE TABLE SALES
(
	STORE_ID INT
	, STORE_NAME VARCHAR(50)
	, PRODUCT_NAME VARCHAR(50)
	, QUANTITY INT
	, PRICE INT
);

SELECT * FROM SALES;

INSERT INTO SALES VALUES
(1, 'Apple Store 1', 'iPhone 13 Pro', 1, 1000),
(1, 'Apple Store 1', 'MackBook Pro 13', 3, 6000),
(1, 'Apple Store 1', 'iPhone 13 Pro', 2, 500),
(2, 'Apple Store 2', 'AirPods Pro', 2, 2000),
(3, 'Apple Store 3', 'iPhone 13 Pro', 1, 750),
(3, 'Apple Store 3', 'iPhone 12 Pro', 1, 2000),
(3, 'Apple Store 3', 'MackBook Pro 13', 1, 1000),
(3, 'Apple Store 3', 'MackBook Air', 1, 4000),
(3, 'Apple Store 3', 'iPhone 13', 1, 2000),
(3, 'Apple Store 3', 'AirPods Pro', 1, 750),
(4, 'Apple Store 4', 'iPhone 12 Pro', 1, 1500),
(4, 'Apple Store 4', 'MackBook Pro 16', 1, 3500);

SELECT * FROM SALES;

-- NEXTED SUB SQUERY
-- SUB QUERY INSIDE SUB QUERY

-- FIND STORES WHO'S SALES WHERE BETTER THAN THE AVERAGE SALES ACCROSS ALL STORE
-- 1)FIND THE TOTAL SALES FOR EACH STORE
-- 2)FIND THE AVERAGE SALES FOR ALL THE RESULTENT STORES
-- 3)COMPARE 1 AND 2

SELECT STORE_NAME, SUM(PRICE) AS TOTAL_SALES
FROM SALES
GROUP BY STORE_NAME;

SELECT AVG(TOTAL_SALES)::NUMERIC(10, 2) AS AVERAGE_SALES
FROM (SELECT STORE_NAME, SUM(PRICE) AS TOTAL_SALES
	FROM SALES
	GROUP BY STORE_NAME
	 ) AS X;

SELECT * FROM SALES;

SELECT * 
FROM (SELECT STORE_NAME, SUM(PRICE) AS TOTAL_PRICE
	FROM SALES
	GROUP BY STORE_NAME
	 ) AS STORES
JOIN (SELECT AVG(TOTAL_PRICE)::NUMERIC(10, 2) AS AVERAGE_SALES
	FROM (SELECT STORE_NAME, SUM(PRICE) AS TOTAL_PRICE
		FROM SALES
		GROUP BY STORE_NAME
		 ) AS X) AS AVG_SALES
	ON STORES.TOTAL_PRICE > AVG_SALES.AVERAGE_SALES;


-- WITH CLAUSE

WITH STORES AS 
	(SELECT STORE_NAME, SUM(PRICE) AS TOTAL_PRICE
	FROM SALES
	GROUP BY STORE_NAME)
SELECT * 
FROM STORES
JOIN (SELECT AVG(TOTAL_PRICE)::NUMERIC(10, 2) AS AVERAGE_SALES
	FROM STORES AS X) AS AVG_SALES
	ON STORES.TOTAL_PRICE > AVG_SALES.AVERAGE_SALES;





























































































































