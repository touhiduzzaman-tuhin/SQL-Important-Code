-- FETCH ALL VALUE FROM PRODUCT TABLE

SELECT * FROM PRODUCT;

-- Write query to display the most expensive product under each category (corresponding to each record)
SELECT *,
FIRST_VALUE(PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC) AS MOST_EXPENSIVE_PRODUCT
FROM PRODUCT;

-- Write query to display the least expensive product under each category (corresponding to each record)
SELECT *,
LAST_VALUE(PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE ASC RANGE BETWEEN UNBOUNDED PRECEDING
							 AND UNBOUNDED FOLLOWING) AS LEAST_EXPENSIVE_PRODUCT
FROM PRODUCT;

SELECT *,
FIRST_VALUE(PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC) AS MOST_EXPENSIVE_PRODUCT,
LAST_VALUE(PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC
							 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LEAST_EXPENSIVE_PRODUCT
FROM PRODUCT;

-- RANGE BETWEEN UNBOUNDED PRECEDING CURRENT ROW -> DEFAULT WINDOW
-- Write query to display the least expensive product under each category (corresponding to each record use range frame)

SELECT *,
LAST_VALUE(PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE ASC 
							  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS LEAST_EXPENSIVE_PRODUCT
FROM PRODUCT
WHERE PRODUCT_CATEGORY = 'Phone';

-- Write query to display the least expensive product under each category (corresponding to each record use rows frame)

SELECT *,
LAST_VALUE(PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE ASC 
							  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS LEAST_EXPENSIVE_PRODUCT
FROM PRODUCT
WHERE PRODUCT_CATEGORY = 'Phone';

-- Alternate way to write SQL query using Window functions
SELECT *,
FIRST_VALUE(PRODUCT_NAME) OVER W AS MOST_EXPENSIVE_PRODUCT,
LAST_VALUE(PRODUCT_NAME) OVER W AS LEAST_EXPENSIVE_PRODUCT
FROM PRODUCT
WINDOW W AS (PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC
			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING);
			
-- Write query to display the Second most expensive product under each category.
SELECT *,
NTH_VALUE(PRODUCT_NAME, 2) OVER W AS SECOND_MOST_EXPENSIVE_PRODUCT
FROM PRODUCT
WINDOW W AS (PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC
			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING);
			
-- Write a query to segregate all the expensive phones, mid range phones and the cheaper phones.
SELECT *,
NTILE(3) OVER(ORDER BY PRICE DESC) AS BUCKETS
FROM PRODUCT
WHERE PRODUCT_CATEGORY = 'Phone';

SELECT PRODUCT_NAME, CASE
						WHEN X.BUCKETS = 1 THEN 'EXPENSIVE PHONES'
						WHEN X.BUCKETS = 2 THEN 'MID RANGE PHONES'
						WHEN X.BUCKETS = 3 THEN 'CHEAPER PHONES'
						END AS PHONE_CATEGORY
FROM (SELECT *,
		NTILE(3) OVER(ORDER BY PRICE DESC) AS BUCKETS
		FROM PRODUCT
		WHERE PRODUCT_CATEGORY = 'Phone') AS X

-- CUME_DIST (cumulative distribution) ; 
/*  Formula = Current Row no (or Row No with value same as current row) / Total no of rows */

-- Query to fetch all products which are constituting the first 30% 
-- of the data in products table based on price.

SELECT *,
CUME_DIST() OVER(ORDER BY PRICE DESC) AS CUME_DISTRIBUTION,
ROUND(CUME_DIST() OVER(ORDER BY PRICE DESC)::NUMERIC *100, 2) AS PCT_CUME_DISTRIBUTION
FROM PRODUCT;

SELECT PRODUCT_NAME, (PCT_CUME_DISTRIBUTION || '%') AS PCT_CUME_DISTRIBUTION
FROM (SELECT *,
		CUME_DIST() OVER(ORDER BY PRICE DESC) AS CUME_DISTRIBUTION,
		ROUND(CUME_DIST() OVER(ORDER BY PRICE DESC)::NUMERIC *100, 2) AS PCT_CUME_DISTRIBUTION
		FROM PRODUCT) AS X
WHERE PCT_CUME_DISTRIBUTION < 30;


-- PERCENT_RANK (relative rank of the current row / Percentage Ranking)
/* Formula = Current Row No - 1 / Total no of rows - 1 */

-- Query to identify how much percentage more expensive is "Galaxy Z Fold 3" when compared to all products
SELECT PRODUCT_NAME, PERCENT_RANKING
FROM (SELECT *,
		PERCENT_RANK() OVER(ORDER BY PRICE DESC) AS PCT_RANK,
		ROUND(PERCENT_RANK() OVER(ORDER BY PRICE DESC)::NUMERIC * 100, 2) AS PERCENT_RANKING
		FROM PRODUCT) AS X
WHERE X.PRODUCT_NAME = 'Galaxy Z Fold 3';
